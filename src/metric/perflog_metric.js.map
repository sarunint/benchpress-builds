{"version":3,"file":"perflog_metric.js","sourceRoot":"./","sources":["src/metric/perflog_metric.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {Options} from '../common_options';\nimport {Metric} from '../metric';\nimport {PerfLogEvent, PerfLogFeatures, WebDriverExtension} from '../web_driver_extension';\n\n\n/**\n * A metric that reads out the performance log\n */\n@Injectable()\nexport class PerflogMetric extends Metric {\n  static SET_TIMEOUT = new InjectionToken('PerflogMetric.setTimeout');\n  static IGNORE_NAVIGATION = new InjectionToken('PerflogMetric.ignoreNavigation');\n  static PROVIDERS = [\n    {\n      provide: PerflogMetric,\n      deps: [\n        WebDriverExtension, PerflogMetric.SET_TIMEOUT, Options.MICRO_METRICS, Options.FORCE_GC,\n        Options.CAPTURE_FRAMES, Options.RECEIVED_DATA, Options.REQUEST_COUNT,\n        PerflogMetric.IGNORE_NAVIGATION\n      ]\n    },\n    {\n      provide: PerflogMetric.SET_TIMEOUT,\n      useValue: (fn: Function, millis: number) => <any>setTimeout(fn, millis)\n    },\n    {provide: PerflogMetric.IGNORE_NAVIGATION, useValue: false}\n  ];\n\n  private _remainingEvents: PerfLogEvent[];\n  private _measureCount: number;\n  private _perfLogFeatures: PerfLogFeatures;\n\n  /**\n   * @param driverExtension\n   * @param setTimeout\n   * @param microMetrics Name and description of metrics provided via console.time / console.timeEnd\n   * @param ignoreNavigation If true, don't measure from navigationStart events. These events are\n   *   usually triggered by a page load, but can also be triggered when adding iframes to the DOM.\n   **/\n  constructor(\n      private _driverExtension: WebDriverExtension,\n      @Inject(PerflogMetric.SET_TIMEOUT) private _setTimeout: Function,\n      @Inject(Options.MICRO_METRICS) private _microMetrics: {[key: string]: string},\n      @Inject(Options.FORCE_GC) private _forceGc: boolean,\n      @Inject(Options.CAPTURE_FRAMES) private _captureFrames: boolean,\n      @Inject(Options.RECEIVED_DATA) private _receivedData: boolean,\n      @Inject(Options.REQUEST_COUNT) private _requestCount: boolean,\n      @Inject(PerflogMetric.IGNORE_NAVIGATION) private _ignoreNavigation: boolean) {\n    super();\n\n    this._remainingEvents = [];\n    this._measureCount = 0;\n    this._perfLogFeatures = _driverExtension.perfLogFeatures();\n    if (!this._perfLogFeatures.userTiming) {\n      // User timing is needed for navigationStart.\n      this._receivedData = false;\n      this._requestCount = false;\n    }\n  }\n\n  describe(): {[key: string]: string} {\n    const res: {[key: string]: any} = {\n      'scriptTime': 'script execution time in ms, including gc and render',\n      'pureScriptTime': 'script execution time in ms, without gc nor render'\n    };\n    if (this._perfLogFeatures.render) {\n      res['renderTime'] = 'render time in ms';\n    }\n    if (this._perfLogFeatures.gc) {\n      res['gcTime'] = 'gc time in ms';\n      res['gcAmount'] = 'gc amount in kbytes';\n      res['majorGcTime'] = 'time of major gcs in ms';\n      if (this._forceGc) {\n        res['forcedGcTime'] = 'forced gc time in ms';\n        res['forcedGcAmount'] = 'forced gc amount in kbytes';\n      }\n    }\n    if (this._receivedData) {\n      res['receivedData'] = 'encoded bytes received since navigationStart';\n    }\n    if (this._requestCount) {\n      res['requestCount'] = 'count of requests sent since navigationStart';\n    }\n    if (this._captureFrames) {\n      if (!this._perfLogFeatures.frameCapture) {\n        const warningMsg = 'WARNING: Metric requested, but not supported by driver';\n        // using dot syntax for metric name to keep them grouped together in console reporter\n        res['frameTime.mean'] = warningMsg;\n        res['frameTime.worst'] = warningMsg;\n        res['frameTime.best'] = warningMsg;\n        res['frameTime.smooth'] = warningMsg;\n      } else {\n        res['frameTime.mean'] = 'mean frame time in ms (target: 16.6ms for 60fps)';\n        res['frameTime.worst'] = 'worst frame time in ms';\n        res['frameTime.best'] = 'best frame time in ms';\n        res['frameTime.smooth'] = 'percentage of frames that hit 60fps';\n      }\n    }\n    for (const name in this._microMetrics) {\n      res[name] = this._microMetrics[name];\n    }\n    return res;\n  }\n\n  beginMeasure(): Promise<any> {\n    let resultPromise = Promise.resolve(null);\n    if (this._forceGc) {\n      resultPromise = resultPromise.then((_) => this._driverExtension.gc());\n    }\n    return resultPromise.then((_) => this._beginMeasure());\n  }\n\n  endMeasure(restart: boolean): Promise<{[key: string]: number}> {\n    if (this._forceGc) {\n      return this._endPlainMeasureAndMeasureForceGc(restart);\n    } else {\n      return this._endMeasure(restart);\n    }\n  }\n\n  /** @internal */\n  private _endPlainMeasureAndMeasureForceGc(restartMeasure: boolean) {\n    return this._endMeasure(true).then((measureValues) => {\n      // disable frame capture for measurements during forced gc\n      const originalFrameCaptureValue = this._captureFrames;\n      this._captureFrames = false;\n      return this._driverExtension.gc()\n          .then((_) => this._endMeasure(restartMeasure))\n          .then((forceGcMeasureValues) => {\n            this._captureFrames = originalFrameCaptureValue;\n            measureValues['forcedGcTime'] = forceGcMeasureValues['gcTime'];\n            measureValues['forcedGcAmount'] = forceGcMeasureValues['gcAmount'];\n            return measureValues;\n          });\n    });\n  }\n\n  private _beginMeasure(): Promise<any> {\n    return this._driverExtension.timeBegin(this._markName(this._measureCount++));\n  }\n\n  private _endMeasure(restart: boolean): Promise<{[key: string]: number}> {\n    const markName = this._markName(this._measureCount - 1);\n    const nextMarkName = restart ? this._markName(this._measureCount++) : null;\n    return this._driverExtension.timeEnd(markName, nextMarkName)\n        .then((_: any) => this._readUntilEndMark(markName));\n  }\n\n  private _readUntilEndMark(\n      markName: string, loopCount: number = 0, startEvent: PerfLogEvent|null = null) {\n    if (loopCount > _MAX_RETRY_COUNT) {\n      throw new Error(`Tried too often to get the ending mark: ${loopCount}`);\n    }\n    return this._driverExtension.readPerfLog().then((events) => {\n      this._addEvents(events);\n      const result = this._aggregateEvents(this._remainingEvents, markName);\n      if (result) {\n        this._remainingEvents = events;\n        return result;\n      }\n      let resolve: (result: any) => void;\n      const promise = new Promise<{[key: string]: number}>(res => { resolve = res; });\n      this._setTimeout(() => resolve(this._readUntilEndMark(markName, loopCount + 1)), 100);\n      return promise;\n    });\n  }\n\n  private _addEvents(events: PerfLogEvent[]) {\n    let needSort = false;\n    events.forEach(event => {\n      if (event['ph'] === 'X') {\n        needSort = true;\n        const startEvent: PerfLogEvent = {};\n        const endEvent: PerfLogEvent = {};\n        for (const prop in event) {\n          startEvent[prop] = event[prop];\n          endEvent[prop] = event[prop];\n        }\n        startEvent['ph'] = 'B';\n        endEvent['ph'] = 'E';\n        endEvent['ts'] = startEvent['ts'] ! + startEvent['dur'] !;\n        this._remainingEvents.push(startEvent);\n        this._remainingEvents.push(endEvent);\n      } else {\n        this._remainingEvents.push(event);\n      }\n    });\n    if (needSort) {\n      // Need to sort because of the ph==='X' events\n      this._remainingEvents.sort((a, b) => {\n        const diff = a['ts'] ! - b['ts'] !;\n        return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n      });\n    }\n  }\n\n  private _aggregateEvents(events: PerfLogEvent[], markName: string): {[key: string]: number}|null {\n    const result: {[key: string]: number} = {'scriptTime': 0, 'pureScriptTime': 0};\n    if (this._perfLogFeatures.gc) {\n      result['gcTime'] = 0;\n      result['majorGcTime'] = 0;\n      result['gcAmount'] = 0;\n    }\n    if (this._perfLogFeatures.render) {\n      result['renderTime'] = 0;\n    }\n    if (this._captureFrames) {\n      result['frameTime.mean'] = 0;\n      result['frameTime.best'] = 0;\n      result['frameTime.worst'] = 0;\n      result['frameTime.smooth'] = 0;\n    }\n    for (const name in this._microMetrics) {\n      result[name] = 0;\n    }\n    if (this._receivedData) {\n      result['receivedData'] = 0;\n    }\n    if (this._requestCount) {\n      result['requestCount'] = 0;\n    }\n\n    let markStartEvent: PerfLogEvent = null !;\n    let markEndEvent: PerfLogEvent = null !;\n    events.forEach((event) => {\n      const ph = event['ph'];\n      const name = event['name'];\n      if (ph === 'B' && name === markName) {\n        markStartEvent = event;\n      } else if (ph === 'I' && name === 'navigationStart' && !this._ignoreNavigation) {\n        // if a benchmark measures reload of a page, use the last\n        // navigationStart as begin event\n        markStartEvent = event;\n      } else if (ph === 'E' && name === markName) {\n        markEndEvent = event;\n      }\n    });\n    if (!markStartEvent || !markEndEvent) {\n      // not all events have been received, no further processing for now\n      return null;\n    }\n    if (markStartEvent.pid !== markEndEvent.pid) {\n      result['invalid'] = 1;\n    }\n\n    let gcTimeInScript = 0;\n    let renderTimeInScript = 0;\n\n    const frameTimestamps: number[] = [];\n    const frameTimes: number[] = [];\n    let frameCaptureStartEvent: PerfLogEvent|null = null;\n    let frameCaptureEndEvent: PerfLogEvent|null = null;\n\n    const intervalStarts: {[key: string]: PerfLogEvent} = {};\n    const intervalStartCount: {[key: string]: number} = {};\n\n    let inMeasureRange = false;\n    events.forEach((event) => {\n      const ph = event['ph'];\n      let name = event['name'] !;\n      let microIterations = 1;\n      const microIterationsMatch = name.match(_MICRO_ITERATIONS_REGEX);\n      if (microIterationsMatch) {\n        name = microIterationsMatch[1];\n        microIterations = parseInt(microIterationsMatch[2], 10);\n      }\n      if (event === markStartEvent) {\n        inMeasureRange = true;\n      } else if (event === markEndEvent) {\n        inMeasureRange = false;\n      }\n      if (!inMeasureRange || event['pid'] !== markStartEvent['pid']) {\n        return;\n      }\n\n      if (this._requestCount && name === 'sendRequest') {\n        result['requestCount'] += 1;\n      } else if (this._receivedData && name === 'receivedData' && ph === 'I') {\n        result['receivedData'] += event['args'] !['encodedDataLength'] !;\n      }\n      if (ph === 'B' && name === _MARK_NAME_FRAME_CAPTURE) {\n        if (frameCaptureStartEvent) {\n          throw new Error('can capture frames only once per benchmark run');\n        }\n        if (!this._captureFrames) {\n          throw new Error(\n              'found start event for frame capture, but frame capture was not requested in benchpress');\n        }\n        frameCaptureStartEvent = event;\n      } else if (ph === 'E' && name === _MARK_NAME_FRAME_CAPTURE) {\n        if (!frameCaptureStartEvent) {\n          throw new Error('missing start event for frame capture');\n        }\n        frameCaptureEndEvent = event;\n      }\n\n      if (ph === 'I' && frameCaptureStartEvent && !frameCaptureEndEvent && name === 'frame') {\n        frameTimestamps.push(event['ts'] !);\n        if (frameTimestamps.length >= 2) {\n          frameTimes.push(\n              frameTimestamps[frameTimestamps.length - 1] -\n              frameTimestamps[frameTimestamps.length - 2]);\n        }\n      }\n\n      if (ph === 'B') {\n        if (!intervalStarts[name]) {\n          intervalStartCount[name] = 1;\n          intervalStarts[name] = event;\n        } else {\n          intervalStartCount[name]++;\n        }\n      } else if ((ph === 'E') && intervalStarts[name]) {\n        intervalStartCount[name]--;\n        if (intervalStartCount[name] === 0) {\n          const startEvent = intervalStarts[name];\n          const duration = (event['ts'] ! - startEvent['ts'] !);\n          intervalStarts[name] = null !;\n          if (name === 'gc') {\n            result['gcTime'] += duration;\n            const amount =\n                (startEvent['args'] !['usedHeapSize'] ! - event['args'] !['usedHeapSize'] !) / 1000;\n            result['gcAmount'] += amount;\n            const majorGc = event['args'] !['majorGc'];\n            if (majorGc && majorGc) {\n              result['majorGcTime'] += duration;\n            }\n            if (intervalStarts['script']) {\n              gcTimeInScript += duration;\n            }\n          } else if (name === 'render') {\n            result['renderTime'] += duration;\n            if (intervalStarts['script']) {\n              renderTimeInScript += duration;\n            }\n          } else if (name === 'script') {\n            result['scriptTime'] += duration;\n          } else if (this._microMetrics[name]) {\n            (<any>result)[name] += duration / microIterations;\n          }\n        }\n      }\n    });\n\n    if (frameCaptureStartEvent && !frameCaptureEndEvent) {\n      throw new Error('missing end event for frame capture');\n    }\n    if (this._captureFrames && !frameCaptureStartEvent) {\n      throw new Error('frame capture requested in benchpress, but no start event was found');\n    }\n    if (frameTimes.length > 0) {\n      this._addFrameMetrics(result, frameTimes);\n    }\n    result['pureScriptTime'] = result['scriptTime'] - gcTimeInScript - renderTimeInScript;\n    return result;\n  }\n\n  private _addFrameMetrics(result: {[key: string]: number}, frameTimes: any[]) {\n    result['frameTime.mean'] = frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;\n    const firstFrame = frameTimes[0];\n    result['frameTime.worst'] = frameTimes.reduce((a, b) => a > b ? a : b, firstFrame);\n    result['frameTime.best'] = frameTimes.reduce((a, b) => a < b ? a : b, firstFrame);\n    result['frameTime.smooth'] =\n        frameTimes.filter(t => t < _FRAME_TIME_SMOOTH_THRESHOLD).length / frameTimes.length;\n  }\n\n  private _markName(index: number) { return `${_MARK_NAME_PREFIX}${index}`; }\n}\n\nconst _MICRO_ITERATIONS_REGEX = /(.+)\\*(\\d+)$/;\n\nconst _MAX_RETRY_COUNT = 20;\nconst _MARK_NAME_PREFIX = 'benchpress';\n\nconst _MARK_NAME_FRAME_CAPTURE = 'frameCapture';\n// using 17ms as a somewhat looser threshold, instead of 16.6666ms\nconst _FRAME_TIME_SMOOTH_THRESHOLD = 17;\n"]}